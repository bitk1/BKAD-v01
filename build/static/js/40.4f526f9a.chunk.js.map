{"version":3,"file":"static/js/40.4f526f9a.chunk.js","mappings":"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","sources":["../node_modules/ipfs-core-utils/node_modules/protobufjs/minimal.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/index-minimal.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/reader.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/reader_buffer.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/roots.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/rpc.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/rpc/service.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/util/longbits.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/util/minimal.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/writer.js","../node_modules/ipfs-core-utils/node_modules/protobufjs/src/writer_buffer.js","../node_modules/kubo-rpc-client/node_modules/any-signal/index.js","../node_modules/kubo-rpc-client/node_modules/browser-readablestream-to-it/index.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/env.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/fetch.browser.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/files/url-source.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/http.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/http/error.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/http/fetch.browser.js","../node_modules/kubo-rpc-client/node_modules/native-fetch/src/index.js","../node_modules/ipfs-core-utils/src/multibases.js","../node_modules/ipfs-core-utils/src/multicodecs.js","../node_modules/ipfs-core-utils/src/multihashes.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bytes.js","../node_modules/kubo-rpc-client/node_modules/multiformats/vendor/varint.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/varint.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/digest.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/identity.js","../node_modules/kubo-rpc-client/node_modules/multiformats/vendor/base-x.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/identity.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base2.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base8.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base10.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base16.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base32.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base36.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base58.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base64.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base256emoji.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/hasher.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/sha2-browser.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/codecs/raw.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/codecs/json.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/cid.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/basics.js","../node_modules/parse-duration/index.mjs","../node_modules/@libp2p/logger/node_modules/multiformats/vendor/base-x.js","../node_modules/@libp2p/logger/node_modules/multiformats/src/bytes.js","../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base.js","../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base58.js","../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base32.js","../node_modules/@libp2p/logger/node_modules/multiformats/src/bases/base64.js","../node_modules/@libp2p/logger/src/index.ts","../node_modules/ipfs-core-utils/src/to-url-string.js","../node_modules/ipfs-core-utils/src/agent.browser.js","../node_modules/kubo-rpc-client/src/lib/core.js","../node_modules/kubo-rpc-client/src/lib/configure.js","../node_modules/kubo-rpc-client/src/lib/mode-to-string.js","../node_modules/kubo-rpc-client/src/lib/parse-mtime.js","../node_modules/kubo-rpc-client/src/lib/to-url-search-params.js","../node_modules/kubo-rpc-client/src/bitswap/wantlist.js","../node_modules/kubo-rpc-client/src/bitswap/wantlist-for-peer.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/vendor/varint.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/varint.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bytes.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/digest.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/vendor/base-x.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base58.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base32.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/cid.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/identity.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base2.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base8.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base10.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base16.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base36.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base64.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base256emoji.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/hasher.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/sha2-browser.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/identity.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/codecs/raw.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/codecs/json.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/basics.js","../node_modules/@libp2p/interfaces/src/errors.ts","../node_modules/@libp2p/interface-peer-id/src/index.ts","../node_modules/@libp2p/peer-id/src/index.ts","../node_modules/kubo-rpc-client/src/bitswap/stat.js","../node_modules/kubo-rpc-client/src/block/get.js","../node_modules/ipfs-core-utils/node_modules/it-peekable/src/index.ts","../node_modules/ipfs-core-utils/node_modules/it-all/src/index.ts","../node_modules/ipfs-core-utils/src/files/utils.js","../node_modules/ipfs-core-utils/src/files/normalise-content.browser.js","../node_modules/ipfs-core-utils/node_modules/it-map/src/index.ts","../node_modules/ipfs-core-utils/node_modules/ipfs-unixfs/src/unixfs.js","../node_modules/ipfs-core-utils/node_modules/ipfs-unixfs/src/index.js","../node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js","../node_modules/ipfs-core-utils/src/files/normalise-input-multiple.browser.js","../node_modules/ipfs-core-utils/src/mode-to-string.js","../node_modules/ipfs-core-utils/src/multipart-request.browser.js","../node_modules/kubo-rpc-client/src/lib/abort-signal.js","../node_modules/kubo-rpc-client/src/block/put.js","../node_modules/kubo-rpc-client/src/block/rm.js","../node_modules/kubo-rpc-client/src/block/stat.js","../node_modules/kubo-rpc-client/src/block/index.js","../node_modules/kubo-rpc-client/src/bootstrap/add.js","../node_modules/kubo-rpc-client/src/bootstrap/list.js","../node_modules/kubo-rpc-client/src/bootstrap/rm.js","../node_modules/kubo-rpc-client/src/bootstrap/index.js","../node_modules/kubo-rpc-client/src/config/profiles/apply.js","../node_modules/kubo-rpc-client/src/config/profiles/index.js","../node_modules/kubo-rpc-client/src/config/get.js","../node_modules/kubo-rpc-client/src/config/get-all.js","../node_modules/kubo-rpc-client/src/config/replace.js","../node_modules/kubo-rpc-client/src/config/set.js","../node_modules/kubo-rpc-client/src/config/index.js","../node_modules/kubo-rpc-client/src/dag/export.js","../node_modules/kubo-rpc-client/src/lib/resolve.js","../node_modules/kubo-rpc-client/node_modules/it-last/src/index.ts","../node_modules/kubo-rpc-client/src/dag/get.js","../node_modules/kubo-rpc-client/node_modules/it-first/src/index.ts","../node_modules/kubo-rpc-client/src/dag/import.js","../node_modules/kubo-rpc-client/src/dag/put.js","../node_modules/kubo-rpc-client/src/dag/resolve.js","../node_modules/kubo-rpc-client/src/dag/index.js","../node_modules/kubo-rpc-client/src/dht/response-types.js","../node_modules/kubo-rpc-client/src/dht/map-event.js","../node_modules/kubo-rpc-client/src/dht/find-peer.js","../node_modules/kubo-rpc-client/src/dht/find-provs.js","../node_modules/kubo-rpc-client/src/dht/get.js","../node_modules/kubo-rpc-client/src/dht/provide.js","../node_modules/kubo-rpc-client/src/dht/put.js","../node_modules/kubo-rpc-client/src/dht/query.js","../node_modules/kubo-rpc-client/src/dht/index.js","../node_modules/kubo-rpc-client/src/diag/cmds.js","../node_modules/kubo-rpc-client/src/diag/net.js","../node_modules/kubo-rpc-client/src/diag/sys.js","../node_modules/kubo-rpc-client/src/diag/index.js","../node_modules/kubo-rpc-client/src/files/cp.js","../node_modules/kubo-rpc-client/src/files/flush.js","../node_modules/kubo-rpc-client/src/lib/object-to-camel.js","../node_modules/kubo-rpc-client/src/lib/object-to-camel-with-metadata.js","../node_modules/kubo-rpc-client/src/files/ls.js","../node_modules/kubo-rpc-client/src/files/mkdir.js","../node_modules/kubo-rpc-client/src/files/mv.js","../node_modules/kubo-rpc-client/src/files/read.js","../node_modules/kubo-rpc-client/src/files/rm.js","../node_modules/kubo-rpc-client/src/files/stat.js","../node_modules/kubo-rpc-client/src/files/write.js","../node_modules/kubo-rpc-client/src/files/index.js","../node_modules/kubo-rpc-client/src/key/export.js","../node_modules/kubo-rpc-client/src/key/gen.js","../node_modules/kubo-rpc-client/src/key/import.js","../node_modules/kubo-rpc-client/src/key/list.js","../node_modules/kubo-rpc-client/src/key/rename.js","../node_modules/kubo-rpc-client/src/key/rm.js","../node_modules/kubo-rpc-client/src/key/index.js","../node_modules/kubo-rpc-client/src/log/level.js","../node_modules/kubo-rpc-client/src/log/ls.js","../node_modules/kubo-rpc-client/src/log/tail.js","../node_modules/kubo-rpc-client/src/log/index.js","../node_modules/kubo-rpc-client/src/name/publish.js","../node_modules/kubo-rpc-client/src/name/resolve.js","../node_modules/kubo-rpc-client/src/name/pubsub/cancel.js","../node_modules/kubo-rpc-client/src/name/pubsub/state.js","../node_modules/kubo-rpc-client/src/name/pubsub/subs.js","../node_modules/kubo-rpc-client/src/name/pubsub/index.js","../node_modules/kubo-rpc-client/src/name/index.js","../node_modules/kubo-rpc-client/src/object/data.js","../node_modules/kubo-rpc-client/src/object/get.js","../node_modules/kubo-rpc-client/src/object/links.js","../node_modules/kubo-rpc-client/src/object/new.js","../node_modules/kubo-rpc-client/src/object/put.js","../node_modules/kubo-rpc-client/src/object/stat.js","../node_modules/kubo-rpc-client/src/object/patch/add-link.js","../node_modules/kubo-rpc-client/src/object/patch/append-data.js","../node_modules/kubo-rpc-client/src/object/patch/rm-link.js","../node_modules/kubo-rpc-client/src/object/patch/set-data.js","../node_modules/kubo-rpc-client/src/object/patch/index.js","../node_modules/kubo-rpc-client/src/object/index.js","../node_modules/ipfs-core-utils/node_modules/multiformats/vendor/varint.js","../node_modules/ipfs-core-utils/node_modules/multiformats/src/varint.js","../node_modules/ipfs-core-utils/node_modules/multiformats/src/bytes.js","../node_modules/ipfs-core-utils/node_modules/multiformats/src/hashes/digest.js","../node_modules/ipfs-core-utils/node_modules/multiformats/vendor/base-x.js","../node_modules/ipfs-core-utils/node_modules/multiformats/src/bases/base.js","../node_modules/ipfs-core-utils/node_modules/multiformats/src/bases/base58.js","../node_modules/ipfs-core-utils/node_modules/multiformats/src/bases/base32.js","../node_modules/ipfs-core-utils/node_modules/multiformats/src/cid.js","../node_modules/ipfs-core-utils/src/pins/normalise-input.js","../node_modules/kubo-rpc-client/src/pin/add-all.js","../node_modules/kubo-rpc-client/src/pin/add.js","../node_modules/kubo-rpc-client/src/pin/ls.js","../node_modules/kubo-rpc-client/src/pin/rm-all.js","../node_modules/kubo-rpc-client/src/pin/rm.js","../node_modules/kubo-rpc-client/src/pin/remote/utils.js","../node_modules/kubo-rpc-client/src/pin/remote/add.js","../node_modules/kubo-rpc-client/src/pin/remote/ls.js","../node_modules/kubo-rpc-client/src/pin/remote/rm.js","../node_modules/kubo-rpc-client/src/pin/remote/rm-all.js","../node_modules/kubo-rpc-client/src/pin/remote/service/utils.js","../node_modules/kubo-rpc-client/src/pin/remote/service/add.js","../node_modules/kubo-rpc-client/src/pin/remote/service/ls.js","../node_modules/kubo-rpc-client/src/pin/remote/service/rm.js","../node_modules/kubo-rpc-client/src/pin/remote/service/index.js","../node_modules/kubo-rpc-client/src/pin/remote/index.js","../node_modules/kubo-rpc-client/src/pin/index.js","../node_modules/kubo-rpc-client/src/lib/http-rpc-wire-format.js","../node_modules/kubo-rpc-client/src/pubsub/ls.js","../node_modules/kubo-rpc-client/src/pubsub/peers.js","../node_modules/kubo-rpc-client/src/pubsub/publish.js","../node_modules/kubo-rpc-client/src/pubsub/subscribe.js","../node_modules/kubo-rpc-client/src/pubsub/unsubscribe.js","../node_modules/kubo-rpc-client/src/pubsub/subscription-tracker.js","../node_modules/kubo-rpc-client/src/pubsub/index.js","../node_modules/kubo-rpc-client/src/refs/local.js","../node_modules/kubo-rpc-client/src/refs/index.js","../node_modules/kubo-rpc-client/src/repo/gc.js","../node_modules/kubo-rpc-client/src/repo/stat.js","../node_modules/kubo-rpc-client/src/repo/version.js","../node_modules/kubo-rpc-client/src/repo/index.js","../node_modules/kubo-rpc-client/src/stats/bw.js","../node_modules/kubo-rpc-client/src/stats/index.js","../node_modules/kubo-rpc-client/src/swarm/addrs.js","../node_modules/kubo-rpc-client/src/swarm/connect.js","../node_modules/kubo-rpc-client/src/swarm/disconnect.js","../node_modules/kubo-rpc-client/src/swarm/local-addrs.js","../node_modules/kubo-rpc-client/src/swarm/peers.js","../node_modules/kubo-rpc-client/src/swarm/index.js","../node_modules/kubo-rpc-client/src/add-all.js","../node_modules/ipfs-core-utils/src/files/normalise-content.js","../node_modules/blob-to-it/src/index.ts","../node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js","../node_modules/ipfs-core-utils/src/files/normalise-input-single.js","../node_modules/kubo-rpc-client/src/add.js","../node_modules/kubo-rpc-client/src/cat.js","../node_modules/kubo-rpc-client/src/commands.js","../node_modules/kubo-rpc-client/src/dns.js","../node_modules/kubo-rpc-client/src/get-endpoint-config.js","../node_modules/kubo-rpc-client/src/get.js","../node_modules/kubo-rpc-client/src/id.js","../node_modules/kubo-rpc-client/src/is-online.js","../node_modules/kubo-rpc-client/src/ls.js","../node_modules/kubo-rpc-client/src/mount.js","../node_modules/kubo-rpc-client/src/ping.js","../node_modules/kubo-rpc-client/src/resolve.js","../node_modules/kubo-rpc-client/src/start.js","../node_modules/kubo-rpc-client/src/stop.js","../node_modules/kubo-rpc-client/src/version.js","../node_modules/kubo-rpc-client/src/index.js","../node_modules/kubo-rpc-client/src/bitswap/index.js","../node_modules/node-fetch/browser.js"],"sourcesContent":["// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new globalThis.AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n","'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n","'use strict'\nconst isElectron = require('is-electron')\n\nconst IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\n// @ts-ignore\nconst IS_ELECTRON = isElectron()\nconst IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON\nconst IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM\nconst IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM\nconst IS_NODE = typeof require === 'function' && typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node' && !IS_ELECTRON\n// @ts-ignore - we either ignore worker scope or dom scope\nconst IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\nconst IS_TEST = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.NODE_ENV === 'test'\nconst IS_REACT_NATIVE = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nmodule.exports = {\n  isTest: IS_TEST,\n  isElectron: IS_ELECTRON,\n  isElectronMain: IS_ELECTRON_MAIN,\n  isElectronRenderer: IS_ELECTRON_RENDERER,\n  isNode: IS_NODE,\n  /**\n   * Detects browser main thread  **NOT** web worker or service worker\n   */\n  isBrowser: IS_BROWSER,\n  isWebWorker: IS_WEBWORKER,\n  isEnvWithDom: IS_ENV_WITH_DOM,\n  isReactNative: IS_REACT_NATIVE\n}\n","'use strict'\n\n/**\n * @typedef {globalThis.Headers} Headers\n * @typedef {globalThis.Request} Request\n * @typedef {globalThis.Response} Response\n */\n\n// use window.fetch if it is available, fall back to node-fetch if not\nmodule.exports = require('native-fetch')\n","'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n","/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst anySignal = require('any-signal')\nconst browserReableStreamToIt = require('browser-readablestream-to-it')\nconst { isBrowser, isWebWorker } = require('./env')\nconst all = require('it-all')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    // @ts-expect-error\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    // @ts-expect-error\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    if (globalThis.ReadableStream != null && opts.body instanceof globalThis.ReadableStream && (isBrowser || isWebWorker)) {\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n      opts.body = new Blob(await all(browserReableStreamToIt(opts.body)))\n    }\n\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          // @ts-expect-error non-browser fetch implementations may take extra options\n          timeout: undefined,\n          headers,\n\n          // https://fetch.spec.whatwg.org/#dom-requestinit-duplex\n          // https://github.com/whatwg/fetch/issues/1254\n          duplex: 'half'\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = async function * () {\n      yield * fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n","'use strict'\n\nclass TimeoutError extends Error {\n  constructor (message = 'Request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n  }\n}\nexports.TimeoutError = TimeoutError\n\nclass AbortError extends Error {\n  constructor (message = 'The operation was aborted.') {\n    super(message)\n    this.name = 'AbortError'\n  }\n}\nexports.AbortError = AbortError\n\nclass HTTPError extends Error {\n  /**\n   * @param {Response} response\n   */\n  constructor (response) {\n    super(response.statusText)\n    this.name = 'HTTPError'\n    this.response = response\n  }\n}\nexports.HTTPError = HTTPError\n","'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n","'use strict'\n\nif (globalThis.fetch && globalThis.Headers && globalThis.Request && globalThis.Response) {\n  module.exports = {\n    default: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Request: globalThis.Request,\n    Response: globalThis.Response\n  }\n} else {\n  module.exports = {\n    default: require('node-fetch').default,\n    Headers: require('node-fetch').Headers,\n    Request: require('node-fetch').Request,\n    Response: require('node-fetch').Response\n  }\n}\n","/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig\n\n\n/**\n * conversion ratios\n */\n\nparse.nanosecond =\nparse.ns = 1 / 1e6\n\nparse['µs'] =\nparse['μs'] =\nparse.us =\nparse.microsecond = 1 / 1e3\n\nparse.millisecond =\nparse.ms =\nparse[''] = 1\n\nparse.second =\nparse.sec =\nparse.s = parse.ms * 1000\n\nparse.minute =\nparse.min =\nparse.m = parse.s * 60\n\nparse.hour =\nparse.hr =\nparse.h = parse.m * 60\n\nparse.day =\nparse.d = parse.h * 24\n\nparse.week =\nparse.wk =\nparse.w = parse.d * 7\n\nparse.month =\nparse.b =\nparse.d * (365.25 / 12)\n\nparse.year =\nparse.yr =\nparse.y = parse.d * 365.25\n\n/**\n * convert `str` to ms\n *\n * @param {String} str\n * @param {String} format\n * @return {Number}\n */\n\nfunction parse(str='', format='ms'){\n  var result = null\n  // ignore commas/placeholders\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2')\n  str.replace(durationRE, function(_, n, units){\n    units = unitRatio(units)\n    if (units) result = (result || 0) + parseFloat(n, 10) * units\n  })\n\n  return result && (result / (unitRatio(format) || 1))\n}\n\nfunction unitRatio(str) {\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\n}\n\nexport default parse\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import debug from 'debug'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base64 } from 'multiformats/bases/base64'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { CID } from 'multiformats/cid'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Key } from 'interface-datastore'\n\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v)\n}\n\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base32.baseEncode(v)\n}\n\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base64.baseEncode(v)\n}\n\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v?: PeerId): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v?: CID): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v: Key): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Multiaddrs\ndebug.formatters.a = (v?: Multiaddr): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\nexport interface Logger {\n  (formatter: any, ...args: any[]): void\n  error: (formatter: any, ...args: any[]) => void\n  trace: (formatter: any, ...args: any[]) => void\n  enabled: boolean\n}\n\nfunction createDisabledLogger (namespace: string): debug.Debugger {\n  const logger = (): void => {}\n  logger.enabled = false\n  logger.color = ''\n  logger.diff = 0\n  logger.log = (): void => {}\n  logger.namespace = namespace\n  logger.destroy = () => true\n  logger.extend = () => logger\n\n  return logger\n}\n\nexport function logger (name: string): Logger {\n  // trace logging is a no-op by default\n  let trace: debug.Debugger = createDisabledLogger(`${name}:trace`)\n\n  // look at all the debug names and see if trace logging has explicitly been enabled\n  if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n    trace = debug(`${name}:trace`)\n  }\n\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace\n  })\n}\n\nexport function disable (): void {\n  debug.disable()\n}\n\nexport function enable (namespaces: string): void {\n  debug.enable(namespaces)\n}\n\nexport function enabled (namespaces: string): boolean {\n  return debug.enabled(namespaces)\n}\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\n\n/**\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {string|Multiaddr|URL} url - A string, multiaddr or URL to convert to a url string\n * @returns {string}\n */\nexport function toUrlString (url) {\n  try {\n    // @ts-expect-error\n    url = multiaddrToUri(multiaddr(url))\n  } catch (/** @type {any} */ err) { }\n\n  url = url.toString()\n\n  return url\n}\n","\nexport default () => {}\n","\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('js-kubo-rpc-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @typedef {import('../types').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {import('../types').HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n","/* eslint-env browser */\nimport { Client } from './core.js'\n\n/**\n * Set default configuration and call create function with them\n *\n * @template T\n * @param {import('../types').ConfigureFn<T>} fn\n * @returns {import('../types').ConfigureFactory<T>}\n */\nexport const configure = (fn) => {\n  return (options) => {\n    return fn(new Client(options), options)\n  }\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","import errCode from 'err-code'\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n","import { modeToString } from './mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((/** @type {any} */ arg) => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {import('../types').BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {import('../types').BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","\n/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n  public readonly code: string\n  public readonly type: string\n\n  constructor (message: string = 'The operation was aborted') {\n    super(message)\n    this.code = AbortError.code\n    this.type = AbortError.type\n  }\n\n  static readonly code = 'ABORT_ERR'\n\n  static readonly type = 'aborted'\n}\n\nexport class CodeError<T extends Record<string, any> = Record<string, never>> extends Error {\n  public readonly props: T\n\n  constructor (\n    message: string,\n    public readonly code: string,\n    props?: T\n  ) {\n    super(message)\n\n    this.name = props?.name ?? 'CodeError'\n    this.props = props ?? {} as T // eslint-disable-line @typescript-eslint/consistent-type-assertions\n  }\n}\n","import type { CID } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nexport type PeerIdType = 'RSA' | 'Ed25519' | 'secp256k1'\n\ninterface BasePeerId {\n  readonly type: PeerIdType\n  readonly multihash: MultihashDigest\n  readonly privateKey?: Uint8Array\n  readonly publicKey?: Uint8Array\n\n  toString: () => string\n  toCID: () => CID\n  toBytes: () => Uint8Array\n  equals: (other: PeerId | Uint8Array | string) => boolean\n}\n\nexport interface RSAPeerId extends BasePeerId {\n  readonly type: 'RSA'\n  readonly publicKey?: Uint8Array\n}\n\nexport interface Ed25519PeerId extends BasePeerId {\n  readonly type: 'Ed25519'\n  readonly publicKey: Uint8Array\n}\n\nexport interface Secp256k1PeerId extends BasePeerId {\n  readonly type: 'secp256k1'\n  readonly publicKey: Uint8Array\n}\n\nexport type PeerId = RSAPeerId | Ed25519PeerId | Secp256k1PeerId\n\nexport const symbol = Symbol.for('@libp2p/peer-id')\n\nexport function isPeerId (other: any): other is PeerId {\n  return other != null && Boolean(other[symbol])\n}\n","import { CID } from 'multiformats/cid'\nimport { bases } from 'multiformats/basics'\nimport { base58btc } from 'multiformats/bases/base58'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { identity } from 'multiformats/hashes/identity'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { Ed25519PeerId, PeerIdType, RSAPeerId, Secp256k1PeerId, symbol } from '@libp2p/interface-peer-id'\nimport type { MultibaseDecoder } from 'multiformats/bases/interface'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst baseDecoder = Object\n  .values(bases)\n  .map(codec => codec.decoder)\n  // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n  .reduce((acc, curr) => acc.or(curr), bases.identity.decoder)\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72\n\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37\n\ninterface PeerIdInit {\n  type: PeerIdType\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface RSAPeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n  publicKey?: Uint8Array\n}\n\ninterface Ed25519PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface Secp256k1PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\nclass PeerIdImpl {\n  public type: PeerIdType\n  public readonly multihash: MultihashDigest\n  public readonly privateKey?: Uint8Array\n  public readonly publicKey?: Uint8Array\n  private string?: string\n\n  constructor (init: PeerIdInit) {\n    this.type = init.type\n    this.multihash = init.multihash\n    this.privateKey = init.privateKey\n\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    })\n  }\n\n  get [Symbol.toStringTag] (): string {\n    return `PeerId(${this.toString()})`\n  }\n\n  get [symbol] (): boolean {\n    return true\n  }\n\n  toString (): string {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1)\n    }\n\n    return this.string\n  }\n\n  // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  toCID (): CID {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash)\n  }\n\n  toBytes (): Uint8Array {\n    return this.multihash.bytes\n  }\n\n  /**\n   * Returns Multiaddr as a JSON string\n   */\n  toJSON (): string {\n    return this.toString()\n  }\n\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n  equals (id: PeerId | Uint8Array | string): boolean {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id)\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this as PeerId)\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes)\n    } else {\n      throw new Error('not valid Id')\n    }\n  }\n\n  /**\n   * Returns PeerId as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { peerIdFromString } from '@libp2p/peer-id'\n   *\n   * console.info(peerIdFromString('QmFoo'))\n   * // 'PeerId(QmFoo)'\n   * ```\n   */\n  [inspect] (): string {\n    return `PeerId(${this.toString()})`\n  }\n}\n\nclass RSAPeerIdImpl extends PeerIdImpl implements RSAPeerId {\n  public readonly type = 'RSA'\n  public readonly publicKey?: Uint8Array\n\n  constructor (init: RSAPeerIdInit) {\n    super({ ...init, type: 'RSA' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\nclass Ed25519PeerIdImpl extends PeerIdImpl implements Ed25519PeerId {\n  public readonly type = 'Ed25519'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Ed25519PeerIdInit) {\n    super({ ...init, type: 'Ed25519' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nclass Secp256k1PeerIdImpl extends PeerIdImpl implements Secp256k1PeerId {\n  public readonly type = 'secp256k1'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Secp256k1PeerIdInit) {\n    super({ ...init, type: 'secp256k1' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nexport function createPeerId (init: PeerIdInit): PeerId {\n  if (init.type === 'RSA') {\n    return new RSAPeerIdImpl(init)\n  }\n\n  if (init.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(init)\n  }\n\n  if (init.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(init)\n  }\n\n  throw new CodeError('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"', 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromPeerId (other: any): PeerId {\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other)\n  }\n\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other)\n  }\n\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other)\n  }\n\n  throw new CodeError('Not a PeerId', 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromString (str: string, decoder?: MultibaseDecoder<any>): PeerId {\n  decoder = decoder ?? baseDecoder\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`))\n\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({ multihash })\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({ multihash })\n    } else {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  }\n\n  return peerIdFromBytes(baseDecoder.decode(str))\n}\n\nexport function peerIdFromBytes (buf: Uint8Array): PeerId {\n  try {\n    const multihash = Digest.decode(buf)\n\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash })\n      } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash })\n      }\n    }\n\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf))\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\nexport function peerIdFromCID (cid: CID): PeerId {\n  if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n    throw new Error('Supplied PeerID CID is invalid')\n  }\n\n  const multihash = cid.multihash\n\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({ multihash: cid.multihash })\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({ multihash: cid.multihash })\n    } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({ multihash: cid.multihash })\n    }\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys (publicKey: Uint8Array, privateKey?: Uint8Array): Promise<PeerId> {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey })\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types').BlockAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Uint8Array(await res.arrayBuffer())\n  }\n  return get\n})\n","\ninterface Peek <T> {\n  peek: () => IteratorResult<T, undefined>\n}\n\ninterface AsyncPeek <T> {\n  peek: () => Promise<IteratorResult<T, undefined>>\n}\n\ninterface Push <T> {\n  push: (value: T) => void\n}\n\ntype Peekable <T> = Iterable<T> & Peek<T> & Push<T> & Iterator<T>\n\ntype AsyncPeekable <T> = AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>\n\nexport default function peekableIterator <I = Iterable<any> | AsyncIterable<any>> (iterable: I): I extends Iterable<infer T>\n  ? Peekable<T>\n  : I extends AsyncIterable<infer T>\n    ? AsyncPeekable<T>\n    : never {\n  // @ts-expect-error\n  const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n    // @ts-expect-error\n    ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n    // @ts-expect-error\n    : [iterable[Symbol.iterator](), Symbol.iterator]\n\n  const queue: any[] = []\n\n  // @ts-expect-error\n  return {\n    peek: () => {\n      return iterator.next()\n    },\n    push: (value: any) => {\n      queue.push(value)\n    },\n    next: () => {\n      if (queue.length > 0) {\n        return {\n          done: false,\n          value: queue.shift()\n        }\n      }\n\n      return iterator.next()\n    },\n    [symbol] () {\n      return this\n    }\n  }\n}\n","\n/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nexport default async function all <T> (source: AsyncIterable<T> | Iterable<T>): Promise<T[]> {\n  const arr = []\n\n  for await (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n","/**\n * @param {any} obj\n * @returns {obj is ArrayBufferView|ArrayBuffer}\n */\nexport function isBytes (obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer\n}\n\n/**\n * @param {any} obj\n * @returns {obj is globalThis.Blob}\n */\nexport function isBlob (obj) {\n  return obj.constructor &&\n    (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n    typeof obj.stream === 'function'\n}\n\n/**\n * An object with a path or content property\n *\n * @param {any} obj\n * @returns {obj is import('ipfs-core-types/src/utils').ImportCandidate}\n */\nexport function isFileObject (obj) {\n  return typeof obj === 'object' && (obj.path || obj.content)\n}\n\n/**\n * @param {any} value\n * @returns {value is ReadableStream}\n */\nexport const isReadableStream = (value) =>\n  value && typeof value.getReader === 'function'\n","import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n","/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function\n */\nexport default async function * map <I, O> (source: AsyncIterable<I> | Iterable<I>, func: (val: I) => O | Promise<O>): AsyncGenerator<O, void, undefined> {\n  for await (const val of source) {\n    yield func(val)\n  }\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.browser.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').BrowserImportCandidate} BrowserImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: Blob }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n * @returns {AsyncGenerator<BrowserImportCandidate, void, undefined>}\n */\nexport function normaliseInput (input) {\n  // @ts-expect-error browser normaliseContent returns a Blob not an AsyncIterable<Uint8Array>\n  return normaliseCandidateMultiple(input, normaliseContent, true)\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js'\nimport { modeToString } from './mode-to-string.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nexport async function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n","import { anySignal } from 'any-signal'\n\n/**\n * @param {any[]} signals\n * @returns {AbortSignal[]}\n */\nfunction filter (signals) {\n  return signals.filter(Boolean)\n}\n\n/**\n * @param  {...AbortSignal|undefined} signals\n */\nexport function abortSignal (...signals) {\n  return anySignal(filter(signals))\n}\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\nexport const createPut = configure((api, configOptions) => {\n  /**\n   * @type {import('../types').BlockAPI[\"put\"]}\n   * @see https://docs.ipfs.tech/reference/kubo/rpc/#api-v0-block-put\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([data], controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (/** @type {any} */ err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {import('../types').RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').BlockAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBlock (config) {\n  return {\n    get: createGet(config),\n    put: createPut(config),\n    rm: createRm(config),\n    stat: createStat(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {import('../types').BootstrapAPI[\"add\"]}\n   */\n  async function add (addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return add\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport const createList = configure(api => {\n  /**\n   * @type {import('../types').BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return list\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').BootstrapAPI[\"rm\"]}\n   */\n  async function rm (addr, options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return rm\n})\n","import { createAdd } from './add.js'\nimport { createList } from './list.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBootstrap (config) {\n  return {\n    add: createAdd(config),\n    list: createList(config),\n    rm: createRm(config)\n  }\n}\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createApply = configure(api => {\n  /**\n   * @type {import('../../types').ConfigProfilesAPI[\"apply\"]}\n   */\n  async function apply (profile, options = {}) {\n    const res = await api.post('config/profile/apply', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: profile,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      original: data.OldCfg, updated: data.NewCfg\n    }\n  }\n\n  return apply\n})\n","import { createApply } from './apply.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createProfiles (config) {\n  return {\n    apply: createApply(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"get\"]}\n   */\n  const get = async (key, options = {}) => {\n    if (!key) {\n      throw new Error('key argument is required')\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Value\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGetAll = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"getAll\"]}\n   */\n  const getAll = async (options = {}) => {\n    const res = await api.post('config/show', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data\n  }\n\n  return getAll\n})\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createSet = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n","import { createProfiles } from './profiles/index.js'\nimport { createGet } from './get.js'\nimport { createGetAll } from './get-all.js'\nimport { createReplace } from './replace.js'\nimport { createSet } from './set.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createConfig (config) {\n  return {\n    getAll: createGetAll(config),\n    get: createGet(config),\n    set: createSet(config),\n    replace: createReplace(config),\n    profiles: createProfiles(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createExport = configure(api => {\n  /**\n   * @type {import('../types').DAGAPI[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    const res = await api.post('dag/export', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: root.toString()\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return dagExport\n})\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('../types').Multicodecs} codecs\n * @param {(cid: CID, options?: import('../types').AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {import('../types').AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","/**\n * Returns the last item of an (async) iterable, unless empty, in which case\n * return `undefined`\n */\nexport default async function last <T> (source: AsyncIterable<T> | Iterable<T>): Promise<T | undefined> {\n  let res\n\n  for await (const entry of source) {\n    res = entry\n  }\n\n  return res\n}\n","import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {import('../types').DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('../types').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n","\n/**\n * Returns the first result from an (async) iterable, unless empty, in which\n * case returns `undefined`\n */\nexport default async function first <T> (source: AsyncIterable<T> | Iterable<T>): Promise<T | undefined> {\n  for await (const entry of source) { // eslint-disable-line no-unreachable-loop\n    return entry\n  }\n\n  return undefined\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\nexport const createImport = configure(api => {\n  /**\n   * @type {import('../types.js').DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {import('../types').DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      }\n\n      let serialized\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        serialized = dagNode\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec)\n        serialized = storeCodec.encode(dagNode)\n        // now we have a serialized form, the server should be told to receive it\n        // in that format\n        settings.inputCodec = settings.storeCodec\n      }\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest([serialized], controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {import('../types.js').DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createDag (codecs, config) {\n  return {\n    export: createExport(config),\n    get: createGet(codecs, config),\n    import: createImport(config),\n    put: createPut(codecs, config),\n    resolve: createResolve(config)\n  }\n}\n","\n// Response types are defined here =\n// https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L15-L24\nexport const SendingQuery = 0\nexport const PeerResponse = 1\nexport const FinalPeer = 2\nexport const QueryError = 3\nexport const Provider = 4\nexport const Value = 5\nexport const AddingPeer = 6\nexport const DialingPeer = 7\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {ReturnType<typeof multiaddr>} Multiaddr\n */\n\n/**\n * @param {import('../types').MapEvent} event\n * @returns {import('../types').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('../types.js').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createFindPeer = configure(api => {\n  /**\n   * @type {import('../types').DHTAPI[\"findPeer\"]}\n   */\n  async function * findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findPeer\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createFindProvs = configure(api => {\n  /**\n   * @type {import('../types.js').DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findProvs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types').DHTAPI[\"get\"]}\n   */\n  async function * get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createProvide = configure(api => {\n  /**\n   * @type {import('../types').DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {import('../types').CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return provide\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { mapEvent } from './map-event.js'\n\nexport const createPut = configure(api => {\n  /**\n   * @type {import('../types.js').DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(\n        await multipartRequest([value], controller, options.headers)\n      )\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return put\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createQuery = configure(api => {\n  /**\n   * @type {import('../types.js').DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return query\n})\n","import { createFindPeer } from './find-peer.js'\nimport { createFindProvs } from './find-provs.js'\nimport { createGet } from './get.js'\nimport { createProvide } from './provide.js'\nimport { createPut } from './put.js'\nimport { createQuery } from './query.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDht (config) {\n  return {\n    findPeer: createFindPeer(config),\n    findProvs: createFindProvs(config),\n    get: createGet(config),\n    provide: createProvide(config),\n    put: createPut(config),\n    query: createQuery(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createCmds = configure(api => {\n  /**\n   * @type {import('../types').DiagAPI[\"cmds\"]}\n   */\n  async function cmds (options = {}) {\n    const res = await api.post('diag/cmds', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return cmds\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createNet = configure(api => {\n  /**\n   * @type {import('../types').DiagAPI[\"net\"]}\n   */\n  async function net (options = {}) {\n    const res = await api.post('diag/net', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    return res.json()\n  }\n  return net\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createSys = configure(api => {\n  /**\n   * @type {import('../types').DiagAPI[\"sys\"]}\n   */\n  async function sys (options = {}) {\n    const res = await api.post('diag/sys', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return sys\n})\n","import { createCmds } from './cmds.js'\nimport { createNet } from './net.js'\nimport { createSys } from './sys.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDiag (config) {\n  return {\n    cmds: createCmds(config),\n    net: createNet(config),\n    sys: createSys(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createCp = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('../types').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n","\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\nexport function objectToCamel (obj) {\n  if (obj == null) {\n    return obj\n  }\n\n  const caps = /^[A-Z]+$/\n\n  /** @type {Record<string, any>} */\n  const output = {}\n\n  return Object.keys(obj).reduce((camelObj, k) => {\n    if (caps.test(k)) { // all caps\n      camelObj[k.toLowerCase()] = obj[k]\n    } else if (caps.test(k[0])) { // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k]\n    } else {\n      camelObj[k] = obj[k]\n    }\n    return camelObj\n  }, output)\n}\n","import { objectToCamel } from './object-to-camel.js'\n\n/**\n * @param {Record<string, any>} entry\n */\nexport function objectToCamelWithMetadata (entry) {\n  const file = objectToCamel(entry)\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mode')) {\n    file.mode = parseInt(file.mode, 8)\n  }\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mtime')) {\n    file.mtime = {\n      secs: file.mtime,\n      nsecs: file.mtimeNsecs || 0\n    }\n\n    delete file.mtimeNsecs\n  }\n\n  return file\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createMkdir = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"mkdir\"]}\n   */\n  async function mkdir (path, options = {}) {\n    const res = await api.post('files/mkdir', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return mkdir\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createMv = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it/source.js'\n\nexport const createRead = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"read\"]}\n   */\n  async function * read (path, options = {}) {\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * toIterable(res.body)\n  }\n  return read\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport HTTP from 'ipfs-utils/src/http.js'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const body = await res.text()\n    // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res)\n      error.message = body\n      throw error\n    }\n  }\n  return rm\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(objectToCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n","import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n","import { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createLs } from './ls.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRead } from './read.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\nimport { createWrite } from './write.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createFiles (config) {\n  return {\n    cp: createCp(config),\n    flush: createFlush(config),\n    ls: createLs(config),\n    mkdir: createMkdir(config),\n    mv: createMv(config),\n    read: createRead(config),\n    rm: createRm(config),\n    stat: createStat(config),\n    write: createWrite(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\nexport const createExport = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['export']}\n   */\n  const exportKey = async (name, password, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return exportKey\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/** @type {import('./types.js').GenOptions} */\nconst defaultOptions = {\n  type: 'ed25519'\n}\n\nexport const createGen = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['gen']}\n   */\n  async function gen (name, options = defaultOptions) {\n    const res = await api.post('key/gen', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return gen\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createImport = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['import']}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return importKey\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createList = configure(api => {\n  /**\n   * @type {import('../types.js').KeyAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('key/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Keys || []).map((/** @type {any} **/ k) => objectToCamel(k))\n  }\n  return list\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRename = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['rename']}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return rename\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').KeyAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    const res = await api.post('key/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data.Keys[0])\n  }\n  return rm\n})\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types.js').Options} config\n * @returns {import('./types.js').KeyAPI}\n */\nexport function createKey (config) {\n  return {\n    export: createExport(config),\n    gen: createGen(config),\n    import: createImport(config),\n    list: createList(config),\n    rename: createRename(config),\n    rm: createRm(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {import('../types').LogAPI[\"level\"]}\n   */\n  async function level (subsystem, level, options = {}) {\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          subsystem,\n          level\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return level\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').LogAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n    return data.Strings\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createTail = configure(api => {\n  /**\n   * @type {import('../types').LogAPI[\"tail\"]}\n   */\n  async function * tail (options = {}) {\n    const res = await api.post('log/tail', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return tail\n})\n","import { createLevel } from './level.js'\nimport { createLs } from './ls.js'\nimport { createTail } from './tail.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createLog (config) {\n  return {\n    level: createLevel(config),\n    ls: createLs(config),\n    tail: createTail(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @param {import('../types').Options} config\n * @returns {import('../types').IPFS<import('../types').HTTPClientExtraOptions>['publish']}\n */\nexport const createPublish = configure(api => {\n  /**\n   * @type {import('../types.js').NameAPI[\"publish\"]}\n   */\n  async function publish (path, options = {}) {\n    const res = await api.post('name/publish', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return publish\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {import('../types').NameAPI[\"resolve\"]}\n   */\n  async function * resolve (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n  return resolve\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @param {import('../../types').Options} config\n * @returns {import('../../types').NamePubsubAPI[\"cancel\"]}\n */\nexport const createCancel = configure(api => {\n  /**\n   * @type {import('../../types').NamePubsubAPI[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) {\n    const res = await api.post('name/pubsub/cancel', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return cancel\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createState = configure(api => {\n  /**\n   * @type {import('../../types').NamePubsubAPI[\"state\"]}\n   */\n  async function state (options = {}) {\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return state\n})\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createSubs = configure(api => {\n  /**\n   * @type {import('../../types').NamePubsubAPI[\"subs\"]}\n   */\n  async function subs (options = {}) {\n    const res = await api.post('name/pubsub/subs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Strings || []\n  }\n  return subs\n})\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\n/**\n * @param {import('../../types').Options} config\n * @returns {import('../../types').NamePubsubAPI}\n */\nexport function createPubsub (config) {\n  return {\n    cancel: createCancel(config),\n    state: createState(config),\n    subs: createSubs(config)\n  }\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { createPubsub } from './pubsub/index.js'\n\n/**\n * @param {import('../types').Options} config\n * @returns {import('../types').IPFS<import('../types').HTTPClientExtraOptions>['name']}\n */\nexport function createName (config) {\n  return {\n    publish: createPublish(config),\n    resolve: createResolve(config),\n    pubsub: createPubsub(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createData = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"data\"]}\n   */\n  async function data (cid, options = {}) {\n    const res = await api.post('object/data', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.arrayBuffer()\n\n    return new Uint8Array(data, 0, data.byteLength)\n  }\n  return data\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLinks = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }))\n  }\n  return links\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createNew = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"new\"]}\n   */\n  async function newObject (options = {}) {\n    const res = await api.post('object/new', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.template,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return newObject\n})\n","import { configure } from '../lib/configure.js'\nimport { createPut as createDagPut } from '../dag/put.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    const dagPut = createDagPut(codecs, options)\n\n    /**\n     * @type {import('../types').ObjectAPI[\"put\"]}\n     */\n    async function put (obj, options = {}) {\n      return dagPut(obj, {\n        ...options,\n        storeCodec: 'dag-pb',\n        hashAlg: 'sha2-256',\n        version: 1\n      })\n    }\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types.js').ObjectAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('object/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const output = await res.json()\n\n    return {\n      ...output,\n      Hash: CID.parse(output.Hash)\n    }\n  }\n  return stat\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createAddLink = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || '',\n          // @ts-expect-error loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\nexport const createAppendData = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPatch (config) {\n  return {\n    addLink: createAddLink(config),\n    appendData: createAppendData(config),\n    rmLink: createRmLink(config),\n    setData: createSetData(config)\n  }\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { createPatch } from './patch/index.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createObject (codecs, config) {\n  return {\n    data: createData(config),\n    get: createGet(config),\n    links: createLinks(config),\n    new: createNew(config),\n    put: createPut(codecs, config),\n    stat: createStat(config),\n    patch: createPatch(config)\n  }\n}\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID (thing) {\n  return CID.asCID(thing) != null\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n\n    if (first.done) {\n      return iterator\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for await (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {import('../types').PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          // eslint-disable-next-line no-continue\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createAdd (config) {\n  const all = createAddAll(config)\n\n  return configure(() => {\n    /**\n     * @type {import('../types').PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('../types').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {import('../types').PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          // eslint-disable-next-line no-continue\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n","import { createRmAll } from './rm-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport const createRm = (config) => {\n  const all = createRmAll(config)\n\n  return configure(() => {\n    /**\n     * @type {import('../types').PinAPI[\"rm\"]}\n     */\n    async function rm (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return rm\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {import('../../types.js').Status} json.Status\n * @returns {import('../../types.js').Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {import('../../types.js').Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {import('../../types.js').AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n","import { encodeAddParams, decodePin } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {import('../../types').RemotePiningAPI[\"add\"]}\n   */\n  async function add (cid, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...query })\n    })\n\n    return decodePin(await response.json())\n  }\n\n  return add\n}\n","import { encodeQuery, decodePin } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {import('../../types.js').RemotePiningAPI[\"ls\"]}\n   */\n  async function * ls ({ timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield decodePin(pin)\n    }\n  }\n\n  return ls\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {import('../../types').RemotePiningAPI[\"rm\"]}\n   */\n  async function rm ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: false\n      })\n    })\n  }\n\n  return rm\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll (client) {\n  /**\n   * @type {import('../../types').RemotePiningAPI[\"rmAll\"]}\n   */\n  async function rmAll ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: true\n      })\n    })\n  }\n\n  return rmAll\n}\n","\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint (url) {\n  const href = String(url)\n  if (href === 'undefined') {\n    throw Error('endpoint is required')\n  }\n  // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n}\n\n/**\n * @param {any} json\n * @returns {import('../../../types').RemotePinServiceWithStat}\n */\nexport function decodeRemoteService (json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && { stat: decodeStat(json.Stat) })\n  }\n}\n\n/**\n * @param {any} json\n * @returns {import('../../../types').Stat}\n */\nexport function decodeStat (json) {\n  switch (json.Status) {\n    case 'valid': {\n      const { Pinning, Pinned, Queued, Failed } = json.PinCount\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      }\n    }\n    case 'invalid': {\n      return { status: 'invalid' }\n    }\n    default: {\n      return { status: json.Status }\n    }\n  }\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { encodeEndpoint } from './utils.js'\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {import('../../../types').RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add (name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  return add\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { decodeRemoteService } from './utils.js'\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {import('../../../types').RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    // @ts-expect-error cannot derive option type from typedef\n    const { stat, headers, timeout, signal } = options\n\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n    })\n\n    /** @type {{RemoteServices: object[]}} */\n    const { RemoteServices } = await response.json()\n\n    return RemoteServices.map(decodeRemoteService)\n  }\n\n  return ls\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {import('../../../types').RemotePiningServiceAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    await client.post('pin/remote/service/rm', {\n      signal: options.signal,\n      headers: options.headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    })\n  }\n\n  return rm\n}\n","import { Client } from '../../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../../../types').Options} config\n */\nexport function createService (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  }\n}\n","import { Client } from '../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\nimport { createService } from './service/index.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createRemote (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(config)\n  }\n}\n","import { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport { createRemote } from './remote/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPin (config) {\n  return {\n    addAll: createAddAll(config),\n    add: createAdd(config),\n    ls: createLs(config),\n    rmAll: createRmAll(config),\n    rm: createRm(config),\n    remote: createRemote(config)\n  }\n}\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { base64url } from 'multiformats/bases/base64'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\n/**\n * @param {string} mb\n * @returns {string}\n */\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb))\n\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\nconst rpcToBytes = mb => base64url.decode(mb)\n\n/**\n * @param {string} mb\n * @returns {bigint}\n */\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\n/**\n * @param {string} text\n * @returns {string}\n */\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text))\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc }\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js'\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').PubsubAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { Strings } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return rpcArrayToTextArray(Strings) || []\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {import('../types').PubsubAPI[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const res = await api.post('pubsub/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return peers\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {import('../types').PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n","import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('js-kubo-rpc-client:pubsub:subscribe')\n\n/**\n * @param {import('../types').Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {import('../types').PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('../types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: import('../types').Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {import('../types').PubsubApiErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          // eslint-disable-next-line no-continue\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n","\n/**\n * @param {import('..').Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createUnsubscribe = (options, subsTracker) => {\n  /**\n   * @type {import('../types').PubsubAPI[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler) {\n    subsTracker.unsubscribe(topic, handler)\n  }\n  return unsubscribe\n}\n","\n/**\n *\n * @property {import('../types').MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, import('../types').PubsubSubscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {import('../types').MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   * @returns {AbortSignal}\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {import('../types').MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n","import { createLs } from './ls.js'\nimport { createPeers } from './peers.js'\nimport { createPublish } from './publish.js'\nimport { createSubscribe } from './subscribe.js'\nimport { createUnsubscribe } from './unsubscribe.js'\nimport { SubscriptionTracker } from './subscription-tracker.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPubsub (config) {\n  const subscriptionTracker = new SubscriptionTracker()\n\n  return {\n    ls: createLs(config),\n    peers: createPeers(config),\n    publish: createPublish(config),\n    subscribe: createSubscribe(config, subscriptionTracker),\n    unsubscribe: createUnsubscribe(config, subscriptionTracker)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {import('../types').RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {import('../types').RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('../types').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGc = configure(api => {\n  /**\n   * @type {import('../types').RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').RepoAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('repo/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      numObjects: BigInt(data.NumObjects),\n      repoSize: BigInt(data.RepoSize),\n      repoPath: data.RepoPath,\n      version: data.Version,\n      storageMax: BigInt(data.StorageMax)\n    }\n  }\n  return stat\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {import('../types').RepoAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await (await api.post('repo/version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return res.Version\n  }\n  return version\n})\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createRepo (config) {\n  return {\n    gc: createGc(config),\n    stat: createStat(config),\n    version: createVersion(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createBw = configure(api => {\n  /**\n   * @type {import('../types').StatsAPI[\"bw\"]}\n   */\n  async function * bw (options = {}) {\n    const res = await api.post('stats/bw', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (stats) => ({\n        totalIn: BigInt(stats.TotalIn),\n        totalOut: BigInt(stats.TotalOut),\n        rateIn: parseFloat(stats.RateIn),\n        rateOut: parseFloat(stats.RateOut)\n      })\n    })\n\n    yield * res.ndjson()\n  }\n  return bw\n})\n","import { createStat as createBitswap } from '../bitswap/stat.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createBw } from './bw.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createStats (config) {\n  return {\n    bitswap: createBitswap(config),\n    repo: createRepo(config),\n    bw: createBw(config)\n  }\n}\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {import('../types.js').SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => multiaddr(a))\n    }))\n  }\n  return addrs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createConnect = configure(api => {\n  /**\n   * @type {import('../types').SwarmAPI[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const res = await api.post('swarm/connect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return connect\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createDisconnect = configure(api => {\n  /**\n   * @type {import('../types').SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return disconnect\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {import('../types.js').SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => multiaddr(a))\n  }\n  return localAddrs\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {import('../types').SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        // eslint-disable-next-line no-nested-ternary\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n","import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\n/**\n * @param {import('../types').Options} config\n * @returns {import('../types').IPFS<import('../types').HTTPClientExtraOptions>['swarm']}\n */\nexport function createSwarm (config) {\n  return {\n    addrs: createAddrs(config),\n    connect: createConnect(config),\n    disconnect: createDisconnect(config),\n    localAddrs: createLocalAddrs(config),\n    peers: createPeers(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {import('./types.js').RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {import('./types.js').IPFSCoreAddProgressFn} progress\n * @returns {[import('./types.js').IPFSCoreAddProgressFn|undefined, import('./types.js').IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {import('./types.js').IPFSCoreAddProgressFn} progress\n * @returns {import('./types.js').IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {import('./types.js').AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n","/* eslint-env browser */\n\nimport browserReadableStreamToIt from 'browser-readablestream-to-it'\n\nexport default function blobToIt (blob: Blob): AsyncIterable<Uint8Array> {\n  if (typeof blob.stream === 'function') {\n    return browserReadableStreamToIt(blob.stream())\n  }\n\n  // firefox < 69 does not support blob.stream()\n  // @ts-expect-error - response.body is optional, but in practice it's a stream.\n  return browserReadableStreamToIt(new Response(blob).body)\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateSingle } from './normalise-candidate-single.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidate} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateSingle(input, normaliseContent)\n}\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from './lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd (options) {\n  const all = createAddAll(options)\n  return configure(() => {\n    /**\n     * @type {import('./types').RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      const source = normaliseInput(input)\n      // @ts-expect-error - all may return undefined if source is empty\n      const addAllPromise = all(source, options)\n      // @ts-expect-error - last may return undefined if source is empty\n      return await last(addAllPromise)\n    }\n    return add\n  })(options)\n}\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createCat = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"cat\"]}\n   */\n  async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return cat\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createCommands = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return commands\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createDns = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"dns\"]}\n   */\n  const dns = async (domain, options = {}) => {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: domain,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Path\n  }\n\n  return dns\n})\n","import { configure } from './lib/configure.js'\n\nexport const createGetEndpointConfig = configure(api => {\n  return () => {\n    const url = new URL(api.opts.base || '')\n    return {\n      host: url.hostname,\n      port: url.port,\n      protocol: url.protocol,\n      pathname: url.pathname,\n      'api-path': url.pathname\n    }\n  }\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createId = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n","import { createId } from './id.js'\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {import('./types').RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {import('./types').RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('./types').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createMount = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"mount\"]}\n   */\n  async function mount (options = {}) {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return mount\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createPing = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"resolve\"]}\n   */\n  async function resolve (path, options = {}) {\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Path } = await res.json()\n    return Path\n  }\n  return resolve\n})\n","import { configure } from './lib/configure.js'\nimport errCode from 'err-code'\n\nexport const createStart = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"start\"]}\n   */\n  const start = async (options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return start\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createStop = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"stop\"]}\n   */\n  async function stop (options = {}) {\n    const res = await api.post('shutdown', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return stop\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return {\n      ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    }\n  }\n\n  return version\n})\n","/* eslint-env browser */\n\nimport { Multibases } from 'ipfs-core-utils/multibases'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { createBitswap } from './bitswap/index.js'\nimport { createBlock } from './block/index.js'\nimport { createBootstrap } from './bootstrap/index.js'\nimport { createConfig } from './config/index.js'\nimport { createDag } from './dag/index.js'\nimport { createDht } from './dht/index.js'\nimport { createDiag } from './diag/index.js'\nimport { createFiles } from './files/index.js'\nimport { createKey } from './key/index.js'\nimport { createLog } from './log/index.js'\nimport { createName } from './name/index.js'\nimport { createObject } from './object/index.js'\nimport { createPin } from './pin/index.js'\nimport { createPubsub } from './pubsub/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createRepo } from './repo/index.js'\nimport { createStats } from './stats/index.js'\nimport { createSwarm } from './swarm/index.js'\nimport { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createCat } from './cat.js'\nimport { createCommands } from './commands.js'\nimport { createDns } from './dns.js'\nimport { createGetEndpointConfig } from './get-endpoint-config.js'\nimport { createGet } from './get.js'\nimport { createId } from './id.js'\nimport { createIsOnline } from './is-online.js'\nimport { createLs } from './ls.js'\nimport { createMount } from './mount.js'\nimport { createPing } from './ping.js'\nimport { createResolve } from './resolve.js'\nimport { createStart } from './start.js'\nimport { createStop } from './stop.js'\nimport { createVersion } from './version.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\n\n/**\n *\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function create (options = {}) {\n  /**\n   * @type {import('./types').BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {import('./types').MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {import('./types').BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {import('./types').MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['key']} */(createKey(options)),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['name']} */(createName(options)),\n    object: createObject(multicodecs, options),\n    pin: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['pin']} */(createPin(options)),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['swarm']} */(createSwarm(options)),\n    version: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['version']} */(createVersion(options)),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nexport { CID } from 'multiformats/cid'\nexport { multiaddr } from '@multiformats/multiaddr'\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js'\nexport const globSource = globSourceImport\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBitswap (config) {\n  return {\n    /**\n     * TODO: https://github.com/ipfs/js-kubo-rpc-client/issues/99\n     */\n    wantlist: createWantlist(config),\n    wantlistForPeer: createWantlistForPeer(config),\n    stat: createStat(config)\n  }\n}\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n"],"names":["module","exports","protobuf","configure","util","_configure","Writer","BufferWriter","Reader","BufferReader","build","require","rpc","roots","LongBits","utf8","indexOutOfRange","reader","writeLength","RangeError","pos","len","buffer","this","buf","length","create_array","Uint8Array","Array","isArray","Error","create","Buffer","isBuffer","readLongVarint","bits","i","lo","hi","readFixed32_end","end","readFixed64","prototype","_slice","subarray","slice","uint32","value","int32","sint32","bool","fixed32","sfixed32","float","readFloatLE","double","readDoubleLE","bytes","start","constructor","call","string","read","skip","skipType","wireType","BufferReader_","fn","Long","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","Object","utf8Slice","Math","min","toString","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","EventEmitter","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","self","asPromise","finish","err","response","emit","setTimeout","endedByRPC","off","zero","toNumber","zzEncode","zeroHash","fromNumber","sign","from","isString","parseInt","fromString","low","high","unsigned","toLong","charCodeAt","String","fromHash","hash","toHash","fromCharCode","mask","part0","part1","part2","dst","src","ifNotSet","keys","undefined","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","writable","enumerable","configurable","set","base64","inquire","pool","isNode","global","process","versions","node","window","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","floor","isObject","isset","isSet","obj","prop","hasOwnProperty","utf8Write","e","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","str","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","json","encoding","allocUnsafe","size","Op","val","next","noop","State","writer","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","alloc","_push","writeFloatLE","writeDoubleLE","writeBytes","decode","write","fork","reset","ldelim","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","anySignal","signals","controller","globalThis","AbortController","onAbort","abort","signal","removeEventListener","addEventListener","aborted","stream","options","arguments","getReader","result","done","preventCancel","cancel","releaseLock","Promise","reject","isElectron","IS_ENV_WITH_DOM","document","nodeType","IS_ELECTRON","IS_BROWSER","IS_ELECTRON_MAIN","IS_ELECTRON_RENDERER","IS_NODE","release","IS_WEBWORKER","importScripts","WorkerGlobalScope","IS_TEST","IS_REACT_NATIVE","navigator","product","isTest","isElectronMain","isElectronRenderer","isBrowser","isWebWorker","isEnvWithDom","isReactNative","HTTP","async","readURLContent","url","http","iterator","urlSource","path","decodeURIComponent","URL","pathname","split","pop","content","fetch","Request","Headers","TimeoutError","HTTPError","ignoreUndefined","URLSearchParams","browserReableStreamToIt","all","defaults","throwHttpErrors","credentials","opts","resource","headers","base","searchParams","transformSearchParams","search","body","JSON","stringify","abortController","ReadableStream","Blob","timeout","promise","ms","Date","now","timedOut","resolve","timeoutID","after","res","clearTimeout","then","duplex","ok","handleError","fromStream","ndjson","chunk","transform","post","put","delete","source","decoder","TextDecoder","lines","l","trim","parse","isAsyncIterable","isNodeReadableStream","iter","Symbol","asyncIterator","bind","return","destroy","isWebReadableStream","streamToAsyncIterator","super","AbortError","statusText","Response","default","fetchWithStreaming","parseHeaders","input","line","index","indexOf","ResponseWithURL","onUploadProgress","XMLHttpRequest","open","Infinity","overrideMimeType","setRequestHeader","onabort","upload","onprogress","responseType","handleEvent","event","type","error","responseURL","status","getAllResponseHeaders","onerror","onload","ontimeout","send","fetchWithProgress","LOAD_BASE","concat","Multibases","_basesByName","_basesByPrefix","_loadBase","loadBase","bases","addBase","prefix","removeBase","nameOrPrefix","listBases","values","LOAD_CODEC","codeOrName","Multicodecs","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codec","codecs","addCodec","code","removeCodec","table","listCodecs","LOAD_HASHER","Multihashes","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hasher","hashers","addHasher","removeHasher","listHashers","coerce","o","ArrayBuffer","isView","byteOffset","encode_1","encode","num","out","offset","oldOffset","INT","MSB","MSBALL","pow","b","shift","counter","REST$1","MSB$1","N1","N2","N3","N4","N5","N6","N7","N8","N9","encodingLength","data","varint","encodeTo","int","target","digest","sizeOffset","digestOffset","Digest","identity","ALPHABET","BASE_MAP","j","x","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","Encoder","baseEncode","Decoder","baseDecode","codePointAt","prefixCodePoint","text","or","ComposedDecoder","decoders","left","right","Codec","encoder","_ref","baseX","_ref2","alphabet","basex","rfc4648","_ref3","bitsPerChar","pad","codes","written","SyntaxError","TextEncoder","base2","base8","base10","base16","base16upper","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base36","base36upper","base58btc","base58flickr","base64pad","base64url","base64urlpad","alphabetBytesToChars","reduce","p","c","alphabetCharsToBytes","base256emoji","byts","char","byt","push","Hasher","sha","crypto","subtle","sha256","sha512","textEncoder","textDecoder","format","link","version","toStringV0","baseCache","toStringV1","cache","WeakMap","cid","Map","CID","multihash","asCID","toV0","DAG_PB_CODE","SHA_256_CODE","createV0","toV1","createV1","equals","other","static","unknown","a","aa","bb","ii","equalBytes","toJSON","toStringTag","for","encodeCID","cidSymbol","remainder","decodeFirst","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","digestBytes","digestSize","multihashCode","initialBytes","parseCIDtoBytes","codeOffset","hashOffset","identityBase","base58","hashes","sha2","raw","durationRE","replace","_","n","units","unitRatio","parseFloat","nanosecond","ns","us","microsecond","millisecond","second","sec","s","minute","m","hour","hr","h","day","d","week","wk","w","month","year","yr","y","logger","trace","namespace","enabled","color","diff","extend","createDisabledLogger","debug","map","r","find","includes","assign","v","t","k","toUrlString","multiaddrToUri","multiaddr","mergeOpts","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","port","errorHandler","msg","startsWith","Message","KEBAB_REGEX","kebabCase","match","Client","_this","agent","isMultiaddr","host","apiPath","Agent","getAgent","keepAlive","maxSockets","normalizeOptions","parseDuration","key","append","isNaN","modeToString","mode","padStart","parseMtime","mtime","secs","nsecs","Seconds","FractionalNanoseconds","getTime","errCode","toUrlSearchParams","arg","hashAlg","mtimeNsecs","urlSearchParams","forEach","createWantlist","api","Keys","createWantlistForPeer","peerId","peer","_defineProperty","symbol","inspect","baseDecoder","acc","curr","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","PeerIdImpl","init","privateKey","toCID","toBytes","id","_id$multihash","uint8ArrayEquals","peerIdFromString","RSAPeerIdImpl","publicKey","Ed25519PeerIdImpl","Secp256k1PeerIdImpl","_decoder","peerIdFromCID","peerIdFromBytes","createStat","provideBufLen","ProvideBufLen","wantlist","Wantlist","peers","Peers","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived","toCoreInterface","createGet","arrayBuffer","peekableIterator","iterable","queue","peek","arr","entry","isBytes","isBlob","isFileObject","isReadableStream","normaliseContent","browserStreamToIt","peekable","itPeekable","itToBlob","parts","func","$Reader","$protobuf","$Writer","$util","$root","Data","blocksizes","ks","Type","filesize","hashType","fanout","UnixTime","c2","instance","fromObject","fromValue","toObject","arrays","DataType","valuesById","Metadata","MimeType","parseMode","errcode","toFileObject","file","normaliseInput","_readableState","normaliseCandidateMultiple","multipartRequest","formData","FormData","total","fileSuffix","fieldName","qs","join","encodeURIComponent","File","abortSignal","_len","_key","filter","createPut","configOptions","Key","createRm","removed","Hash","Size","createBlock","config","rm","stat","createAdd","addr","ma","createList","createBootstrap","add","list","createApply","profile","original","OldCfg","updated","NewCfg","createProfiles","apply","Value","createGetAll","createReplace","uint8ArrayFromString","createSet","params","encodeParam","createConfig","getAll","profiles","createExport","root","getBlock","load","getCodec","block","lastCid","remainderPath","last","createBlockGet","localResolve","first","createImport","pinRoots","Root","Cid","PinErrorMsg","pinErrorMsg","dagNode","settings","storeCodec","serialized","inputCodec","createResolve","ipfsPath","RemPath","createDag","export","import","mapEvent","ID","messageType","messageName","closer","Responses","Addrs","multiaddrs","protocols","providers","_event$ID","Extra","_ref4","createFindPeer","createFindProvs","uint8ArrayToString","createProvide","cids","recursive","cidArr","createQuery","createDht","findPeer","findProvs","provide","query","createCmds","createNet","createSys","createDiag","cmds","net","sys","createCp","sources","destination","sourceArr","createFlush","objectToCamel","caps","camelObj","test","objectToCamelWithMetadata","createLs","long","Entries","createMkdir","createMv","createRead","count","toIterable","WithLocality","createWrite","streamChannels","createFiles","cp","flush","ls","mkdir","mv","password","defaultOptions","createGen","pem","createRename","oldName","newName","createKey","gen","rename","createLevel","subsystem","level","Strings","createTail","createLog","createPublish","Path","createCancel","createState","createSubs","createPubsub","state","subs","createName","publish","pubsub","createData","dataEncoding","Links","Name","Tsize","createLinks","createNew","template","dagPut","createDagPut","output","createAddLink","dLink","createAppendData","createRmLink","createSetData","createPatch","addLink","appendData","rmLink","setData","createObject","links","new","patch","isCID","thing","toPin","pin","metadata","createAddAll","Pins","paths","createRmAll","decodePin","Status","encodeService","service","encodeQuery","force","encodeAddParams","background","origins","origin","client","encodeEndpoint","href","decodeRemoteService","endpoint","ApiEndpoint","Stat","decodeStat","Pinning","Pinned","Queued","Failed","PinCount","pinCount","queued","pinning","pinned","failed","RemoteServices","createService","createRemote","rmAll","createPin","addAll","remote","rpcToText","mb","rpcToBytes","rpcToBigInt","textToUrlSafeRpc","strings","createPeers","topic","createSubscribe","subsTracker","handler","fail","subscribe","ffWorkaround","catch","unsubscribe","onMessage","onEnd","onError","_msg$key","_msg$signature","seqno","sequenceNumber","topicIDs","signature","isAbortError","readMessages","createUnsubscribe","SubscriptionTracker","_subs","topicSubs","unsubs","subscriptionTracker","createLocal","createRefs","args","argsArr","local","createGc","numObjects","NumObjects","repoSize","RepoSize","repoPath","RepoPath","Version","storageMax","StorageMax","createVersion","createRepo","gc","createBw","stats","totalIn","TotalIn","totalOut","TotalOut","rateIn","RateIn","rateOut","RateOut","createStats","bitswap","createBitswap","repo","bw","createAddrs","addrs","createConnect","createDisconnect","createLocalAddrs","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","createSwarm","connect","disconnect","localAddrs","progressFn","progress","createProgressHandler","createOnUploadProgress","loaded","position","toAsyncIterable","blob","browserReadableStreamToIt","normaliseCandidateSingle","addAllPromise","createCat","createCommands","createDns","domain","createGetEndpointConfig","compressionLevel","createId","addresses","createIsOnline","pathStr","mapLink","typeOf","Mode","Mtime","MtimeNsecs","Objects","createMount","createPing","createStart","createStop","multibaseCodecs","ipld","multibases","blockCodecs","dagPB","dagCBOR","dagJSON","dagJOSE","multicodecs","multihashHashers","multihashes","wantlistForPeer","bootstrap","cat","commands","dag","dht","diag","dns","files","getEndpointConfig","isOnline","mount","object","ping","refs","stop","swarm","globalObject","getGlobal"],"sourceRoot":""}